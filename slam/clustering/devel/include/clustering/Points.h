// Generated by gencpp from file clustering/Points.msg
// DO NOT EDIT!


#ifndef CLUSTERING_MESSAGE_POINTS_H
#define CLUSTERING_MESSAGE_POINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace clustering
{
template <class ContainerAllocator>
struct Points_
{
  typedef Points_<ContainerAllocator> Type;

  Points_()
    : header()
    , count(0)
    , points()
    , clusters()
    , channels()
    , is_3d(false)  {
    }
  Points_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , count(0)
    , points(_alloc)
    , clusters(_alloc)
    , channels(_alloc)
    , is_3d(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _count_type;
  _count_type count;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _clusters_type;
  _clusters_type clusters;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _channels_type;
  _channels_type channels;

   typedef uint8_t _is_3d_type;
  _is_3d_type is_3d;





  typedef boost::shared_ptr< ::clustering::Points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clustering::Points_<ContainerAllocator> const> ConstPtr;

}; // struct Points_

typedef ::clustering::Points_<std::allocator<void> > Points;

typedef boost::shared_ptr< ::clustering::Points > PointsPtr;
typedef boost::shared_ptr< ::clustering::Points const> PointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clustering::Points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clustering::Points_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clustering::Points_<ContainerAllocator1> & lhs, const ::clustering::Points_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.count == rhs.count &&
    lhs.points == rhs.points &&
    lhs.clusters == rhs.clusters &&
    lhs.channels == rhs.channels &&
    lhs.is_3d == rhs.is_3d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clustering::Points_<ContainerAllocator1> & lhs, const ::clustering::Points_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clustering

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::clustering::Points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clustering::Points_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clustering::Points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clustering::Points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clustering::Points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clustering::Points_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clustering::Points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33601f15053b6bb6f55b6bf5417eecb7";
  }

  static const char* value(const ::clustering::Points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33601f15053b6bb6ULL;
  static const uint64_t static_value2 = 0xf55b6bf5417eecb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::clustering::Points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clustering/Points";
  }

  static const char* value(const ::clustering::Points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clustering::Points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 count\n"
"geometry_msgs/Point[] points\n"
"int32[] clusters\n"
"int32[] channels\n"
"bool is_3d\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::clustering::Points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clustering::Points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.count);
      stream.next(m.points);
      stream.next(m.clusters);
      stream.next(m.channels);
      stream.next(m.is_3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clustering::Points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clustering::Points_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.count);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "clusters[]" << std::endl;
    for (size_t i = 0; i < v.clusters.size(); ++i)
    {
      s << indent << "  clusters[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.clusters[i]);
    }
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.channels[i]);
    }
    s << indent << "is_3d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_3d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLUSTERING_MESSAGE_POINTS_H
